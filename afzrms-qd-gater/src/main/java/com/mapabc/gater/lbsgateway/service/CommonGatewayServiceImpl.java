package com.mapabc.gater.lbsgateway.service;

import java.net.Socket;
import java.util.HashMap;

import org.apache.commons.logging.LogFactory;

import com.mapabc.gater.directl.AllConfigCache;
import com.mapabc.gater.directl.Tools;
import com.mapabc.gater.lbsgateway.GBLTerminalList;
import com.mapabc.gater.lbsgateway.GprsTcpThreadList;
import com.mapabc.gater.lbsgateway.GprsUdpThreadList;
import com.mapabc.gater.lbsgateway.PrepareParse;
import com.mapabc.gater.lbsgateway.TerminalTypeList;
import com.mapabc.gater.lbsgateway.bean.ConnectionInfo;
import com.mapabc.gater.lbsgateway.bean.TTerminal;
import com.mapabc.gater.lbsgateway.bean.TerminalTCPAddress;
import com.mapabc.gater.lbsgateway.bean.TerminalTypeBean;
import com.mapabc.gater.lbsgateway.bean.TerminalUDPAddress;
import com.mapabc.gater.lbsgateway.gprsserver.jhs.JHSHandler;
import com.mapabc.gater.lbsgateway.gprsserver.jhs.LbsClient;
import com.mapabc.gater.util.HttpResponseEntity;
import com.mapabc.gater.util.HttpUtil;

//Generated by MyEclipse

public class CommonGatewayServiceImpl implements ICommonGatewayService {
	private static org.apache.commons.logging.Log log=LogFactory.getLog(CommonGatewayServiceImpl.class);

	
	
	public String getDeviceIdByTcpAddress(Socket socket){
		Socket socketAddress = socket;
		String deviceId = null;
		try {

			deviceId = GprsTcpThreadList.getInstance().getDeviceIdByTcpAddress(
					socketAddress);
			log.info(
					"==从缓存获取（TCP客户端地址，序列号）《=》（" + socketAddress + ","
							+ deviceId + "）");

			if (deviceId != null) {
				return deviceId;
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return deviceId;
	}
	
	public Socket getTcpSocketByDeviceId(String deviceId){
		  Socket socket = null;
		try {

			TerminalTCPAddress tcpAddr = GprsTcpThreadList.getInstance().getGpsTcpThreadBySim(deviceId);
			if (tcpAddr != null){
				socket = tcpAddr.getSocketChannel().socket();
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return socket;
	}

	/**
	 * 下行指令
	 * 
	 * @param deviceid
	 *            设备ID
	 * @param cmd
	 *            指令内容
	 * @param 命令ID
	 * @return int :0已发送 1不在线 2指令无效 -1异常
	 */
	public int send2Terminal(String deviceid, byte[] cmd, String cmdId) {

		String conKind = this.getConnectionKind(deviceid);// 连接类型
		if (conKind == null) {
			log.info("终端" + deviceid + "没有适配到端口类型");
			return -1;
		}
		if (conKind.equals("0")) {// TCP链接

			return this.sendDataToTcpTerminal(deviceid, cmd, cmdId);
		} else if (conKind.equals("1")) {// UDP端口

			return this.sendDataToUdpTerminal(deviceid, cmd, cmdId);
		}
		return 0;
	}

	/**
	 * 获取终端连接性质
	 * 
	 * @param deviceid
	 *            设备ID
	 * @return 0 TCP 1 UDP
	 * 
	 */
	public String getConnectionKind(String deviceid) {

		String type = null;

		TTerminal terminal = GBLTerminalList.getInstance().getTerminaInfo(
				deviceid);
		if (terminal == null) {
			log.info("缓存中不存在" + deviceid + "终端信息!");
			return null;
		}
		String type_code = terminal.getTEntTermtype();
		if (type_code == null) {
			log.info(deviceid + "终端类型为空!");
			return null;
		}

		ConnectionInfo[] cinfo = PrepareParse.getInstance().loadTermConfig();
		TerminalTypeBean bean = TerminalTypeList.getInstance().getTerminalType(
				type_code);
		if (bean != null) {
			type = bean.getMtType();
		}

		return type;
	}

	/**
	 * 把字节数据指令通过UDP发送到设备
	 * 
	 * @param deviceId
	 *            设备ID
	 * @param cmd
	 *            指令数据
	 * @return int :0已发送 1不在线 2指令无效 3终端无返回 -1异常失败
	 */
	public synchronized int sendDataToUdpTerminal(String deviceid, byte[] cmd,
			String cmdId) {
		int ret = -1;
		// 发送指令
		if (deviceid == null || deviceid.trim().equals("")) {
			log.info("终端ID为空！");
			return -1;
		}
		TerminalUDPAddress gprs = null;

		gprs = GprsUdpThreadList.getInstance().getGpsThreadBySim(deviceid);

		if (gprs != null && cmd != null && cmd.length > 0) {
			// 车辆在线并且指令有效的情况
			ret = gprs.sendUDPByteData(cmd);
			 
		} else {
			if (gprs == null) {// 终端不在线
				ret = 1;
			}
			// else if (cmd != null && cmd.length != 0) {
			// ret = 2;
			// }
		}

		return ret;
	}

	/**
	 * 把字节数据指令通过TCP发送到设备
	 * 
	 * @param deviceId
	 *            设备ID
	 * @param cmd
	 *            指令数据
	 * @return int :0已发送 1不在线 2指令无效 3终端无返回 -1异常失败
	 */
	public synchronized int sendDataToTcpTerminal(String deviceid, byte[] cmd,
			String cmdId) {
		int flag = -1;
		// 发送指令
		TerminalTCPAddress gprs = null;

		gprs = GprsTcpThreadList.getInstance().getGpsTcpThreadBySim(deviceid);

		if (gprs != null && cmd != null && cmd.length > 0) {
			// 车辆在线并且指令有效的情况
			try {
				log.info(
						"下发的TCP命令到" + deviceid + ",内容:"
								+ Tools.bytesToHexString(cmd));
				flag = gprs.sendByteArrayData(cmd);

			} catch (Exception ex) {
				log.info(
						"Send tcp cmd failed:, because:" + ex.getMessage());
				log.error("终端下发tcp指令异常：" + ex.getMessage(), ex);
				return -1;
			}

		} else {
			if (gprs == null) {
				flag = 1;
			}
			// else if (cmd != null && cmd.length != 0) {
			// flag = 2;
			// }
		}
		return flag;
	}

	/**
	 * 通过HTTP POST下发内容
	 * 
	 * @param deviceid
	 *            设备id
	 * @param 数据内容
	 * @param url
	 *            目标地址
	 * @return 下发返回的内容
	 */
	public byte[] sendByHttpPost(String deviceid, byte[] cmd, String url) {

		if (url == null || url.trim().length() <= 0) {
			log.info(deviceid + " HTTP URL IS NULL!");
			return null;
		}

		try {
//			String termType = GBLTerminalList.getInstance().getTermTypeCode(
//					deviceid);
			// ProtocalService protocal = new ProtocalServiceImpl();
			// byte[] postCont = protocal.makeProtocal(deviceid, termType, cmd);

			HttpUtil hclient = new HttpUtil();
			byte[] resValue = hclient.forward(url,"POST", cmd,"GB18030",10);
			log.info(
					"POST 下发指令内容：" + Tools.bytesToHexString(cmd));

			// if (null == resValue || resValue.length <= 0) {
			// log.info(
			// "http post Send failed, because : terminal no return");
			// return StructionResult.NO_RESP0NSE;
			// } else {
			// result = 0; //protocal.parsePostResult(termType, resValue);
			// Log.getInstance()
			// .outLog("POST下发内容回应结果：" + new String(resValue));
			// }
			return resValue;
		} catch (Exception e) {

			// TODO Auto-generated catch block
			e.printStackTrace();
			log.error("Send post data error", e);
		}

		return null;
	}

	/**
	 * @param deviceId
	 *            设备ID
	 * @return true在线 false不在线
	 */
	public boolean isOnLine(String deviceId) {
		// TODO Auto-generated method stub
		try {
			if (GprsTcpThreadList.getInstance().isExist(deviceId))
				return true;
			if (GprsUdpThreadList.getInstance().isExist(deviceId))
				return true;
		} catch (Exception e) {
			log.error("判断终端是否在线异常", e);
			return false;
		}
		return false;
	}

	/**
	 * 通过HTTP GET下发内容
	 * 
	 * @param url
	 *            目标地址
	 * @return 0发送成功 3发送失败
	 */
	public int sendByHttpGet(String url) {
		int result = 4;
		try {
			HttpResponseEntity entity = HttpUtil.sendGet(url, 1 * 1000);
			return entity.getResponse_code() == 200 ? 0 : 3;
		} catch (Exception e) {
			result = 4;
		}
		return result;
	}

	public int sendDoogNaviTask(String deviceId, byte[] cmd, String taskType) {
		int ret = 1;
		boolean flag = false;
	 
		if (cmd == null)
			return -1;

		byte[] contBytes = new byte[cmd.length - 4];
		System.arraycopy(cmd, 4, contBytes, 0, contBytes.length); // 去掉协议头baju

		flag = this.Send(contBytes);

		if (flag) {
			ret = 0; 
			log.info(
					"下发任务到NAVISERVER成功，内容：" + Tools.bytesToHexString(cmd));
		} else { 
			log.info(
					"下发任务到NAVISERVER失败，内容：" + Tools.bytesToHexString(cmd));
		}

		return ret;
	}

	protected boolean Send(byte[] content) {
		boolean flag = false;
		HashMap<String, String> naviMap = AllConfigCache.getInstance()
				.getNaviserverMap();

		String jhsserver = naviMap.get("JHSSERVERIP");
		int jhsport = Integer.parseInt(naviMap.get("JHSSERVERPORT"));
		try {

			LbsClient client = new LbsClient("HTTP下发", jhsserver, jhsport);
			JHSHandler jhsHandler = new JHSHandler(client, content);
			jhsHandler.run();
			flag = true;

		} catch (Exception e) {
			flag = false;
			e.printStackTrace();
			log.error("下发任务异常", e);
		}

		return flag;

	}

	/**
	 * 转发到其他TCP服务
	 * 
	 * @param ip
	 *            tcp目标IP
	 * @param port
	 *            tcp目标端口
	 * @param content
	 *            转发的内容
	 * @return
	 * @author 
	 */
	public int fwdOtherTcp(String deviceid, String ip, int port, byte[] content) {
		int flag = -1;

		try {

//			LbsClient client = new LbsClient("下行 TCP 转发", ip, port);
//			String res = client.sentDataBytes(content);
//			log.info(
//					deviceid + "转发数据到:" + ip + ":" + port + ",数据内容："
//							+ Tools.bytesToHexString(content));
//			if (res.equals("ok"))
//				flag = 0;
//			else
//				flag = -1;

		} catch (Exception e) {
			flag = -1;
			e.printStackTrace();
			log.error("下发任务异常", e);
		}

		return flag;

	}

}